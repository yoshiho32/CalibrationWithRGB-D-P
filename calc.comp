#version 430 core

#define MILLIMETER 0.001
#define DEPTH_SCALE (-MILLIMETER)
#define DEPTH_MAXIMUM (0.0)
#define KARNEL_WIDTH   0.00195
#define KARNEL_HEIGHT  0.00236

#define FAR  1000
#define NEAR 500

#define E_RENGE 500

// スケール
const vec2 scale = vec2(
  1.546592,
  1.222434
);

// コンピュートシェーダー上のカーネルサイズ
layout(local_size_x = 1, local_size_y = 1) in;

// 現在のデプスデータ
layout (location = 0) uniform sampler2D depth;

layout (rgba32f, binding = 1) uniform writeonly image2D xyz_out;
layout (rgba32f, binding = 2) uniform writeonly image2D xy2_out;
layout (rgba32f, binding = 3) uniform writeonly image2D xyzx_out;

layout (rgba32f, binding = 4) uniform writeonly image2D depth_out;

struct DataSet{
  vec4 data_xyz;
  vec4 data_xy2;
  vec4 data_xyzx;
 };

 

// 計算結果の出力
layout (std430, binding = 7) buffer Input{
  DataSet data;
};

// デプス値をスケーリングする
float s(in float z)
{
  return z == 0.0 ? DEPTH_MAXIMUM : z * DEPTH_SCALE;
}




void main(){

	data.data_xyz = vec4(0,0,0,0);
	data.data_xy2 = vec4(0,0,0,0);
	data.data_xyzx = vec4(0,0,0,0);

	vec4 CenterPoint = texture(depth, vec2(0.5,0.5));


	// 現在座標・image2D基準
	ivec2 itexcoord = ivec2(gl_GlobalInvocationID.xy);

	// 現在座標・texture基準
	vec2 depthcoord  = vec2(itexcoord.x * KARNEL_WIDTH, itexcoord.y * KARNEL_HEIGHT); 

	// 現在座標がカメラ座標でどの位置かの対応
	vec4 z = vec4(texture(depth, depthcoord).xyz, 1.0);
	// FARより遠いをマイナスで表現、NEARより近いを普通にステップする NEAR < p.z < FARで有効化
	vec4 p = z * step(-FAR, -z.z) * step(NEAR, z.z);
	//vec4 p = z * step(-(CenterPoint.z + E_RENGE), -z.z) * step((CenterPoint.z - E_RENGE), z.z);
	// 0~8000のデプスデータを0, 1~2にする
	p.z =  s(p.z);
	p.xy = p.xy-0.5;

	vec4 s_xy2  = vec4(p.x*p.x, p.y*p.y, p.z*p.z, p.w);
	vec4 s_xyzx = vec4(p.x*p.y, p.y*p.z, p.x*p.z, p.w);

	data.data_xyz = z;
	data.data_xy2 = p;
	data.data_xyzx = s_xyzx;

	imageStore(xyz_out, itexcoord, p);
	imageStore(xy2_out, itexcoord, s_xy2);
	imageStore(xyzx_out, itexcoord, s_xyzx);
	imageStore(depth_out, itexcoord, p);

}