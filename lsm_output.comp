#version 430 core

#define MILLIMETER 0.001
#define DEPTH_SCALE (-65535.0 * MILLIMETER)
#define DEPTH_MAXIMUM (-10.0)

// シェアメモリ
shared vec4 pixel_xyz[2][2];
shared vec4 pixel_xy2[2][2];
shared vec4 pixel_xyzx[2][2];

// コンピュートシェーダー上のカーネルサイズ
layout(local_size_x = 2, local_size_y = 2) in;

// 元データの入力
layout (rgba32f, binding = 0) uniform restrict image2D xyz_in;
layout (rgba32f, binding = 1) uniform restrict image2D xy2_in;
layout (rgba32f, binding = 2) uniform restrict image2D xyzx_in;

struct DataSet{
  vec4 data_xyz;
  vec4 data_xy2;
  vec4 data_xyzx;
 };

// 計算結果の出力
layout (std430, binding = 3) buffer Input{
  DataSet data;
};

void main(){
	// テクスチャの現在地(0,0)-(1,1)
	ivec2 texcoord    = ivec2(gl_GlobalInvocationID.xy);
	// ワークグループ内での現在地(0,0)-(1,1)
	ivec2 local_coord = ivec2(gl_LocalInvocationID.xy);
	
	// ワークグループ内でデータを並列に読み込ませる
	pixel_xyz[local_coord.y][local_coord.x] =  imageLoad(xyz_in, texcoord);
	pixel_xy2[local_coord.y][local_coord.x] =  imageLoad(xy2_in, texcoord);
	pixel_xyzx[local_coord.y][local_coord.x] = imageLoad(xyzx_in, texcoord);
	
	// ワークグループ内で処理が終わるのを待つ
	barrier();
	memoryBarrierShared();

	// 足し合わせる用
	vec4 s_xyz = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 s_xy2 = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 s_xyzx = vec4(0.0, 0.0, 0.0, 0.0);

	// ワークグループ内の値を順番に足し合わせていく
	for(int i = 0; i < 2; i++){
	  for(int j = 0; j < 2; j++){
	    s_xyz  += pixel_xyz[i][j];
		s_xy2  += pixel_xy2[i][j];
		s_xyzx += pixel_xyzx[i][j];
	  }
	}

	data.data_xyz = s_xyz;
	data.data_xy2 = s_xy2;
	data.data_xyzx = s_xyzx;
	//data.data_xyz = vec4(0.0, 1.0, 2.0, 3.0);
	//data.data_xy2 = vec4(4.0, 5.0, 6.0, 7.0);
	//data.data_xyzx = vec4(8.0, 9.0, 10.0, 11.0);
	
	

}